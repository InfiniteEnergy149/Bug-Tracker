//SQL reference pages
 - https://www.javaguides.net/2019/08/java-hsql-tutorial-create-read-update-delete-jdbc-examples.html
 - http://www.javavillage.in/hsql-db-sample-example.php
jdbc:hsqldb:file:C:/Users/Cdani/eclipse-workspace/BugTracker/src/HSQLDB/DB
//Update SQL classes to desired SQL requirements


Encrypt Password

Cv- databases


















OLD FILES 
    |
    V
    
    
package application;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableRow;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

//intro, add new account and sign in scenes
public class DisplayScenes {
	// MainDisplay mainDisplay;

	int sceneSize = 550;
	SQLInsertRecord insertRecord = new SQLInsertRecord();
	SQLReadRecord readRecord = new SQLReadRecord();
	SQLUpdateRecord updateRecord = new SQLUpdateRecord();
	SQLDeleteRecord deleteRecord = new SQLDeleteRecord();
	int currentUserAccountId;
	int clickedProjectId;
Stage primaryStage;


	// Design of introduction scene
	/*public Scene introDesign(Stage primaryStage) throws IOException {
		Parent root = FXMLLoader.load(getClass().getResource("IntroScene.fxml"));
		Scene introScene = new Scene(root);
		return introScene;
	}*/

	
	public void setCurrentUserID(int id) {
		this.currentUserAccountId = id;
	}

	public int getCurrentUserID() {
		return currentUserAccountId;
	}

	// Design of sign in scene
	public Scene signIn(Stage primaryStage) {
		System.out.println("I Arrived");
		GridPane gridHeader = new GridPane();

		Label title = new Label("Sign In");
		title.setStyle("-fx-text-fill: black;-fx-font: nor" + "mal bold 20px 'serif'");

		Label emailTxt = new Label("Email: ");
		TextField emailEnter = new TextField();

		Label passwordTxt = new Label("Password: ");
		TextField passwordEnter = new TextField();

		Label text = new Label("Please enter details");

		Button submit = new Button("Submit");
		submit.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event1) {
				Boolean checkCredentials = false;
				// read accounts from database
				// check if username and password matches an existing account
				try {
					String emailEntered;
					String emailFound;
					String passwordEntered;
					String passwordFound;

					for (int i = 0; i < readRecord.getLastAccountId() + 1; i++) {
						readRecord.setReadRecordById(0, i);
						emailEntered = emailEnter.getText();
						emailFound = readRecord.getAccount().getEmail();
						passwordEntered = passwordEnter.getText();
						passwordFound = readRecord.getAccount().getPassword();
						if (emailEntered.equals(emailFound) && passwordEntered.equals(passwordFound)) {
							checkCredentials = true;
							currentUserAccountId = readRecord.getAccount().getAccountId();
						}
					}

				} catch (Exception e) {

					e.printStackTrace();
				}
				if (checkCredentials == true) {
					primaryStage.setScene(summary(primaryStage));
				} else {
					text.setText("Email and Password don't match records");
				}
				// if exist then save account id in variable and sned to summary scene
				// if not then send warning that username and password don't match records
			}
		});

		// Column, Row
		gridHeader.add(title, 3, 0);
		gridHeader.add(emailTxt, 2, 1);
		gridHeader.add(emailEnter, 3, 1);
		gridHeader.add(passwordTxt, 2, 2);
		gridHeader.add(passwordEnter, 3, 2);
		gridHeader.add(submit, 3, 3);
		gridHeader.add(text, 3, 4);

		Scene signInScene = new Scene(gridHeader, sceneSize, sceneSize);
		signInScene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		return signInScene;
	}

	// Design of new account scene
	public Scene signUp(Stage primaryStage) {
		GridPane gridHeader = new GridPane();

		Label title = new Label("New Account");
		title.setStyle("-fx-text-fill: black;-fx-font: nor" + "mal bold 20px 'serif'");
		Label nameTxt = new Label("Enter Name");
		TextField nameEnter = new TextField();
		Label emailTxt = new Label("Enter Email");
		TextField emailEnter = new TextField();
		Label passwordTxt = new Label("Enter Password");
		TextField passwordEnter = new TextField();
		Label passwordCheckTxt = new Label("ReEnter Password");
		TextField passwordCheckEnter = new TextField();
		Label roleTxt = new Label("Enter Job Role");
		TextField roleEnter = new TextField();
		Label text = new Label("Please enter details");
		Button submit = new Button("Submit");
		submit.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event1) {
				// Add data to database
				// get account ID + 1 from database
				int accountId;

				// CHECK THAT DATA/ACCOUNTS ARENT DUPLICATED

				// Checks to make sure both passwords are the same
				if (passwordEnter.getText().contentEquals(passwordCheckEnter.getText())) {
					try {
						accountId = readRecord.getLastAccountId() + 1;
						Accounts account = new Accounts(accountId, nameEnter.getText(), emailEnter.getText(),
								passwordEnter.getText(), roleEnter.getText(), 0);
						accountId = 0;
						insertRecord.insertRecord(account);
					} catch (SQLException | ClassNotFoundException e) {

						e.printStackTrace();
					}
					// change scene
					primaryStage.setScene(signIn(primaryStage));
				} else {
					// Tell user if passwords don't match
					text.setText("passwords don't match");
				}

			}
		});

		gridHeader.add(title, 2, 0);
		gridHeader.add(nameTxt, 1, 2);
		gridHeader.add(nameEnter, 2, 2);
		gridHeader.add(emailTxt, 1, 3);
		gridHeader.add(emailEnter, 2, 3);
		gridHeader.add(passwordTxt, 1, 4);
		gridHeader.add(passwordEnter, 2, 4);
		gridHeader.add(passwordCheckTxt, 1, 5);
		gridHeader.add(passwordCheckEnter, 2, 5);
		gridHeader.add(roleTxt, 1, 6);
		gridHeader.add(roleEnter, 2, 6);
		gridHeader.add(submit, 2, 7);
		gridHeader.add(text, 2, 8);

		Scene newAccountScene = new Scene(gridHeader, sceneSize, sceneSize);
		newAccountScene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		return newAccountScene;
	}

	// Design of summary scene
	public Scene summary(Stage primaryStage) {
		GridPane gridHeader = new GridPane();

		Button summary = new Button("Summary");
		summary.setStyle(" -fx-background-color: yellow;");
		Button profile = new Button("Profile");
		profile.setOnAction(event -> {
			primaryStage.setScene(profile(primaryStage));
		});
		Button accounts = new Button("Accounts");
		accounts.setOnAction(event -> {
			primaryStage.setScene(accounts(primaryStage));
		});
		Button projects = new Button("Project");
		projects.setOnAction(event -> {
			primaryStage.setScene(projects(primaryStage));
		});
		Button bugs = new Button("Bug");
		bugs.setOnAction(event -> {
			primaryStage.setScene(bugs(primaryStage));
		});
		Button logout = new Button("Log out");
		logout.setStyle(" -fx-background-color: cyan;");
		logout.setOnAction(event -> {
			/*try {
				//primaryStage.setScene(introDesign(primaryStage));
			} catch (IOException e) {
				e.printStackTrace();
			}*/
		});

		Label empty = new Label("                     ");
		gridHeader.add(empty, 0, 0);
		gridHeader.add(summary, 1, 0);
		gridHeader.add(profile, 2, 0);
		gridHeader.add(accounts, 3, 0);
		gridHeader.add(projects, 4, 0);
		gridHeader.add(bugs, 5, 0);
		gridHeader.add(logout, 6, 0);

		Scene summaryScene = new Scene(gridHeader, sceneSize, sceneSize);
		summaryScene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		return summaryScene;
	}

	public Scene profile(Stage primaryStage) {
		GridPane gridHeader = new GridPane();

		Button summary = new Button("Summary");
		summary.setOnAction(event -> {
			primaryStage.setScene(summary(primaryStage));
		});
		Button profile = new Button("Profile");
		profile.setStyle(" -fx-background-color: yellow;");
		Button accounts = new Button("Accounts");
		accounts.setOnAction(event -> {
			primaryStage.setScene(accounts(primaryStage));
		});
		Button projects = new Button("Project");
		projects.setOnAction(event -> {
			primaryStage.setScene(projects(primaryStage));
		});
		Button bugs = new Button("Bug");
		bugs.setOnAction(event -> {
			primaryStage.setScene(bugs(primaryStage));
		});
		Button logout = new Button("Log out");
		logout.setStyle(" -fx-background-color: cyan;");
		logout.setOnAction(event -> {
			/*try {
				//primaryStage.setScene(introDesign(primaryStage));
			} catch (IOException e) {
				e.printStackTrace();
			}*/
		});

		Label empty = new Label("                     ");
		gridHeader.add(empty, 0, 0);
		gridHeader.add(summary, 1, 0);
		gridHeader.add(profile, 2, 0);
		gridHeader.add(accounts, 3, 0);
		gridHeader.add(projects, 4, 0);
		gridHeader.add(bugs, 5, 0);
		gridHeader.add(logout, 6, 0);
		try {
			readRecord.setReadRecordById(0, currentUserAccountId);
		} catch (Exception e) {

			e.printStackTrace();
		}
		VBox showProfile = new VBox();
		GridPane gridShow = new GridPane();
		Label title = new Label("PROFILE");
		Label notice = new Label("TO DO - READ*,EDIT/UPDATE");
		Label showName = new Label("NAME: ");
		TextField name = new TextField(readRecord.getAccount().getFullName());
		Label showEmail = new Label("EMAIL: ");
		TextField email = new TextField(readRecord.getAccount().getEmail());
		Label showRole = new Label("ROLE: ");
		TextField role = new TextField(readRecord.getAccount().getRole());
		Label showPassword = new Label("PASSWORD: ");
		TextField password = new TextField(readRecord.getAccount().getPassword());
		Label showProjectName = new Label("PROJECT: ");
		int currentAccountProjectId = readRecord.getAccount().getProjectId();
		try {
			readRecord.setReadRecordById(1, currentAccountProjectId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		String currentAccountProjectName;
		if (readRecord.getProject().getName() == null) {
			currentAccountProjectName = "None selected";
		} else {
			currentAccountProjectName = readRecord.getProject().getName();
		}
		// Label ProjectName = new Label(currentAccountProjectName);

		Button updateRecords = new Button("Update Records");
		Button deleteAccount = new Button("Delete Account");

		// Change Project
		// Label, listView, Change Project n
		Label listTitle = new Label("Project Options");
		ComboBox<String> listOfProjectNames = new ComboBox();// arrayList of project names

		int defaultIndex = readRecord.getAccount().getProjectId();
		// Set default value
		listOfProjectNames.setValue(currentAccountProjectName);
		listOfProjectNames.setPrefSize(200, 100);
		ArrayList<String> projListItems = new ArrayList<>();
		

		try {
			projListItems.add("None Selected");
			for (int i = 1; i < readRecord.getLastProjectId() + 1; i++) {
				readRecord.setReadRecordById(1, i);
				projListItems.add(readRecord.getProject().getName());

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Update ListView

		ObservableList<String> listOfProjectsUpdate = FXCollections.observableArrayList(projListItems);
		listOfProjectNames.setItems(listOfProjectsUpdate);

	
		updateRecords.setOnAction(event -> {
            
			
			//UPDATE PROJECT
			// if selected combo box != current project
			// update account project
			int comboIndex = 0;
			for (int i = 0; i < projListItems.size();i++) {
				if (projListItems.get(i)== listOfProjectNames.getValue()) {
					comboIndex = i;
				}
			}
			
				// update account project
				//System.out.println("****************" + name.getText());
				Accounts text = new Accounts(readRecord.getAccount().getAccountId(), name.getText(), email.getText(), password.getText(),role.getText(),comboIndex);
				try {
					updateRecord.updateRecord(text);
				} catch (Exception e) {
					e.printStackTrace();
				}
				//projectId = comboIndex
		});

//***************DELETING THE CURRENT ACCOUNT
		// Correct current user account id
		// setCurrentUserID(getCurrentUserID()-1);
		// logout
		
		deleteAccount.setStyle(" -fx-background-color: red;");
		boolean deleteCheck = false;
		deleteAccount.setOnAction(event -> {
			
			Accounts thisAccount = readRecord.getAccount();
			try {
					deleteRecord.deleteRecord(thisAccount);
			//	primaryStage.setScene(introDesign(primaryStage));
			} catch (Exception e) {
				
				e.printStackTrace();
			}
		});

		gridShow.add(showName, 1, 1);
		gridShow.add(name, 2, 1);
		gridShow.add(showEmail, 1, 2);
		gridShow.add(email, 2, 2);
		gridShow.add(showRole, 1, 3);
		gridShow.add(role, 2, 3);
		gridShow.add(showPassword, 1, 4);
		gridShow.add(password, 2, 4);
		gridShow.add(showProjectName, 1, 5);
		gridShow.add(listOfProjectNames, 2, 5);
		gridShow.add(updateRecords, 1, 6);
		gridShow.add(deleteAccount, 1, 7);
		

		showProfile.getChildren().setAll(gridHeader, title, notice, gridShow);

		Scene profileScene = new Scene(showProfile, sceneSize, sceneSize);
		profileScene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		return profileScene;
	}

	@SuppressWarnings("unchecked")
	public Scene accounts(Stage primaryStage) {
		GridPane gridHeader = new GridPane();

		Button summary = new Button("Summary");
		summary.setOnAction(event -> {
			primaryStage.setScene(summary(primaryStage));
		});
		Button profile = new Button("Profile");
		profile.setOnAction(event -> {
			primaryStage.setScene(profile(primaryStage));
		});
		Button accounts = new Button("Accounts");
		accounts.setStyle(" -fx-background-color: yellow;");
		Button projects = new Button("Project");
		projects.setOnAction(event -> {
			primaryStage.setScene(projects(primaryStage));
		});
		Button bugs = new Button("Bug");
		bugs.setOnAction(event -> {
			primaryStage.setScene(bugs(primaryStage));
		});
		Button logout = new Button("Log out");
		logout.setStyle(" -fx-background-color: cyan;");
		logout.setOnAction(event -> {
			/*try {
			//	primaryStage.setScene(introDesign(primaryStage));
			} catch (IOException e) {
				e.printStackTrace();
			}*/
		});
		Label empty = new Label("                     ");

		try {
			readRecord.setReadRecordById(0, currentUserAccountId);
		} catch (Exception e) {
			e.printStackTrace();
		}

		VBox vertLayout = new VBox();
		gridHeader.add(empty, 0, 0);
		gridHeader.add(summary, 1, 0);
		gridHeader.add(profile, 2, 0);
		gridHeader.add(accounts, 3, 0);
		gridHeader.add(projects, 4, 0);
		gridHeader.add(bugs, 5, 0);
		gridHeader.add(logout, 6, 0);

		TextField searchBar = new TextField("Search Account");
		Button searchButton = new Button("Search");
		// Search button changes order of searches

		GridPane gridLayout = new GridPane();
		gridLayout.add(searchBar, 0, 0);
		gridLayout.add(searchButton, 1, 0);

		HBox horList = new HBox();

		// If projectid = 0 then reurn string "None selected"

		TableView<Accounts> accountList = new TableView<>();
		ArrayList<Accounts> accountItems = new ArrayList<>();

		// Fill arrayList with data from database
		try {
			for (int i = 1; i < readRecord.getLastAccountId() + 1; i++) {
				readRecord.setReadRecordById(0, i);
				accountItems.add(readRecord.getAccount());
			}
		} catch (Exception e) {
			e.printStackTrace();

		}

		// Update TableView
		ObservableList<Accounts> accountListUpdate = FXCollections.observableList(accountItems);
		accountList.setItems(accountListUpdate);

		TableColumn<Accounts, String> colName = new TableColumn<Accounts, String>("Name");
		colName.setCellValueFactory(p -> new SimpleStringProperty(p.getValue().getFullName()));

		TableColumn<Accounts, String> colEmail = new TableColumn<Accounts, String>("Email");
		colEmail.setCellValueFactory(p -> new SimpleStringProperty(p.getValue().getEmail()));

		TableColumn<Accounts, String> colRole = new TableColumn<Accounts, String>("Job Role");
		colRole.setCellValueFactory(p -> new SimpleStringProperty(p.getValue().getRole()));

		TableColumn<Accounts, String> colProject = new TableColumn<Accounts, String>("Project Name");
		colProject.setCellValueFactory(p -> new SimpleStringProperty(p.getValue().getProjectName()));

		accountList.getColumns().setAll(colName, colEmail, colRole, colProject);

		accountList.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

		// ObservableList<Accounts> accountListUpdate =
		// FXCollections.observableList(accountItems);
		accountList.setItems(accountListUpdate);

		//SEARCH BAR
				searchButton.setOnAction(event -> {
					try {
						searchBar.getText();

					} catch (Exception e) {
						e.printStackTrace();
					}
				});
		
		// horList.getChildren().setAll(accountList,gridLayoutTwo);

		vertLayout.getChildren().setAll(gridHeader, gridLayout, accountList);
		Scene accountsScene = new Scene(vertLayout, sceneSize, sceneSize);
		accountsScene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		return accountsScene;
	}

	@SuppressWarnings("unchecked")
	public Scene projects(Stage primaryStage) {
		GridPane gridHeader = new GridPane();

		Button summary = new Button("Summary");
		summary.setOnAction(event -> {
			primaryStage.setScene(summary(primaryStage));
		});
		Button profile = new Button("Profile");
		profile.setOnAction(event -> {
			primaryStage.setScene(profile(primaryStage));
		});
		Button accounts = new Button("Accounts");
		accounts.setOnAction(event -> {
			primaryStage.setScene(accounts(primaryStage));
		});
		Button projects = new Button("Project");
		projects.setStyle(" -fx-background-color: yellow;");
		Button bugs = new Button("Bug");
		bugs.setOnAction(event -> {
			primaryStage.setScene(bugs(primaryStage));
		});
		Button logout = new Button("Log out");
		logout.setStyle(" -fx-background-color: cyan;");
		logout.setOnAction(event -> {
			/*try {
			//	primaryStage.setScene(introDesign(primaryStage));
			} catch (IOException e) {
				e.printStackTrace();
			}*/
		});

		TableView<Projects> projectList = new TableView<>();

		ArrayList<Projects> projectItems = new ArrayList<>();

		// Fill arrayList with data from database
		try {
			for (int i = 1; i < readRecord.getLastProjectId() + 1; i++) {
				readRecord.setReadRecordById(1, i);
				projectItems.add(readRecord.getProject());
			}
		} catch (Exception e) {
			e.printStackTrace();

		}

		// Update TableView
		ObservableList<Projects> projectListUpdate = FXCollections.observableList(projectItems);
		projectList.setItems(projectListUpdate);

		TableColumn<Projects, String> colName = new TableColumn<Projects, String>("name");
		colName.setCellValueFactory(p -> new SimpleStringProperty(p.getValue().getName()));

		TableColumn<Projects, String> colDescr = new TableColumn<Projects, String>("description");
		colDescr.setCellValueFactory(p -> new SimpleStringProperty(p.getValue().getDescripton()));

		projectList.getColumns().setAll(colName, colDescr);

		projectList.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

		// ObservableList<Projects> projectListUpdate =
		// FXCollections.observableList(projectItems);
		projectList.setItems(projectListUpdate);

		VBox layout = new VBox();
		Label empty = new Label("                     ");
		gridHeader.add(empty, 0, 0);
		gridHeader.add(summary, 1, 0);
		gridHeader.add(profile, 2, 0);
		gridHeader.add(accounts, 3, 0);
		gridHeader.add(projects, 4, 0);
		gridHeader.add(bugs, 5, 0);
		gridHeader.add(logout, 6, 0);

		Label nameTxt = new Label("Enter Name");
		TextField nameEnter = new TextField();
		Label descriptionTxt = new Label("Enter Description");
		TextField descriptionEnter = new TextField();
		Button addProject = new Button("Add Project");
		Label notice = new Label("To do - ADD*,DELETE,EDIT,LINK");
		addProject.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event1) {
				if (nameEnter.getText().equals("") || descriptionEnter.getText().equals("")) {
					notice.setText("name and description must be used");
				} else {
					// Add to arraylist projectItems
					Projects newProject;
					try {
						newProject = new Projects(readRecord.getLastProjectId() + 1, nameEnter.getText(),
								descriptionEnter.getText());
						projectItems.add(newProject);
						// Update tableview
						projectList.setItems(projectListUpdate);
						projectList.refresh();
						// add to db using insertRecord
						insertRecord.insertRecord(newProject);
					} catch (ClassNotFoundException | SQLException e) {
						e.printStackTrace();
						System.out.println("New project not added");
					}

				}
			}
		});

		GridPane gridLayout = new GridPane();
		gridLayout.add(nameTxt, 0, 1);
		gridLayout.add(nameEnter, 1, 1);
		gridLayout.add(descriptionTxt, 2, 1);
		gridLayout.add(descriptionEnter, 3, 1);
		gridLayout.add(addProject, 4, 1);
		gridLayout.add(notice, 1, 2);

		// When row is clicked twice edit button turns yellow and can edit
		// When row is clicked once edit button turns grey and cant edit
		// When row is clicked and editProject is clicked then
		// Edit Name and Edit Description will update row in tableview and db
		Button editProject = new Button("Edit Project");
		Label editNameTxt = new Label("Edit Name");
		TextField editNameEnter = new TextField();
		Label editDescriptionTxt = new Label("Edit Description");
		TextField editDescriptionEnter = new TextField();
		Label editNoticeOne = new Label("Double click row to select edit");
		Label editNoticeTwo = new Label("Single click row to unselect edit");
		Button deleteProject = new Button("Delete project");

		projectList.setRowFactory(tv -> {
			TableRow<Projects> row = new TableRow<>();
			row.setOnMouseClicked(event -> {
				if (!row.isEmpty() && event.getButton() == MouseButton.PRIMARY && event.getClickCount() == 2) {
					editProject.setStyle(" -fx-background-color: yellow;");
					editProject.setText("Edit Row");
					deleteProject.setStyle(" -fx-background-color: yellow;");
					deleteProject.setText("Delete");
					clickedProjectId = row.getItem().getProjectId();
				}

				if (!row.isEmpty() && event.getButton() == MouseButton.PRIMARY && event.getClickCount() == 1) {
					editProject.setStyle(" -fx-background-color: grey;");
					editProject.setText("Edit Project");
					deleteProject.setStyle(" -fx-background-color: grey;");
					deleteProject.setText("Edit Project");
				}
			});
			return row;
		});

		editProject.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event1) {
				if (editProject.getText().equals("Edit Row")) {
					// Update row
					Projects newProjectItem = new Projects(clickedProjectId, editNameEnter.getText(),
							editDescriptionEnter.getText());
					try {
						updateRecord.updateRecord(newProjectItem);
					} catch (Exception e) {
						e.printStackTrace();
					}
					projectItems.set(clickedProjectId - 1, newProjectItem);
					projectList.setItems(projectListUpdate);
					projectList.refresh();
				}
			}
		});

		deleteProject.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event1) {
				if (editProject.getText().equals("Edit Row")) {
					// Update row
					ArrayList<Projects> newProjectItems = new ArrayList<>();
					Projects newProjectItem = new Projects(clickedProjectId, editNameEnter.getText(),
							editDescriptionEnter.getText());

					// delete record
					try {
						deleteRecord.deleteRecord(newProjectItem);
					} catch (Exception e2) {
						e2.printStackTrace();
					}

					// Make projectItems read from updated database

					try {
						projectItems.remove(0);
						// reset readRecord
						readRecord.setReadRecordById(1, 1);
						for (int i = 0; i < readRecord.getLastProjectId(); i++) {
							readRecord.setReadRecordById(1, i + 1);
							newProjectItems.add(readRecord.getProject());
							projectItems.set(i, newProjectItems.get(i));
						}
					} catch (Exception e) {
						e.printStackTrace();

					}
					projectList.setItems(projectListUpdate);
					projectList.refresh();
				}
			}
		});

		gridLayout.add(editNameTxt, 0, 3);
		gridLayout.add(editNameEnter, 1, 3);
		gridLayout.add(editDescriptionTxt, 2, 3);
		gridLayout.add(editDescriptionEnter, 3, 3);
		gridLayout.add(editProject, 4, 3);
		gridLayout.add(editNoticeOne, 1, 4);
		gridLayout.add(editNoticeTwo, 3, 4);
		gridLayout.add(deleteProject, 1, 5);

		// gridHeader.add(projectList, 1, 1);
		// addNewProject.getChildren().setAll(nameTxt, nameEnter, descriptionTxt,
		// descriptionEnter, addProject);
		layout.getChildren().setAll(gridHeader, projectList, gridLayout);
		Scene projectsScene = new Scene(layout, sceneSize, sceneSize);
		projectsScene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		return projectsScene;
	}

	public Scene bugs(Stage primaryStage) {
		GridPane gridHeader = new GridPane();

		Button summary = new Button("Summary");
		summary.setOnAction(event -> {
			primaryStage.setScene(summary(primaryStage));
		});
		Button profile = new Button("Profile");
		profile.setOnAction(event -> {
			primaryStage.setScene(profile(primaryStage));
		});
		Button accounts = new Button("Accounts");
		accounts.setOnAction(event -> {
			primaryStage.setScene(accounts(primaryStage));
		});
		Button projects = new Button("Project");
		projects.setOnAction(event -> {
			primaryStage.setScene(projects(primaryStage));
		});
		Button bugs = new Button("Bug");
		bugs.setStyle(" -fx-background-color: yellow;");
		Button logout = new Button("Log out");
		logout.setStyle(" -fx-background-color: cyan;");
		logout.setOnAction(event -> {
			/*try {
			//	primaryStage.setScene(introDesign(primaryStage));
			} catch (IOException e) {
				e.printStackTrace();
			}*/
		});

		Label empty = new Label("                     ");
		gridHeader.add(empty, 0, 0);
		gridHeader.add(summary, 1, 0);
		gridHeader.add(profile, 2, 0);
		gridHeader.add(accounts, 3, 0);
		gridHeader.add(projects, 4, 0);
		gridHeader.add(bugs, 5, 0);
		gridHeader.add(logout, 6, 0);

		Scene bugsScene = new Scene(gridHeader, sceneSize, sceneSize);
		bugsScene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		return bugsScene;
	}

	public Scene bugEntry(Stage primaryStage) {
		GridPane gridHeader = new GridPane();

		Label bugEntry = new Label("BUG ENTRY ");
		gridHeader.add(bugEntry, 3, 0);

		Scene bugEntryScene = new Scene(gridHeader, sceneSize, sceneSize);
		bugEntryScene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
		return bugEntryScene;
	}

}
    
    
    